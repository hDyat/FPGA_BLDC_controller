
c_program.elf:     file format elf32-littlenios2
c_program.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000dc8 memsz 0x00000dc8 flags r-x
    LOAD off    0x00001de8 vaddr 0x00010de8 paddr 0x00010ed4 align 2**12
         filesz 0x000000ec memsz 0x000000ec flags rw-
    LOAD off    0x00001fc0 vaddr 0x00010fc0 paddr 0x00010fc0 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001ed4  2**0
                  CONTENTS
  2 .text         00000da4  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  00010dc4  00010dc4  00001dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000ec  00010de8  00010ed4  00001de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00010fc0  00010fc0  00001fc0  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00010fcc  00010fcc  00001ed4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000280  00000000  00000000  00001ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003233  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000010fd  00000000  00000000  000053ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000147f  00000000  00000000  000064a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003e0  00000000  00000000  00007928  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f86  00000000  00000000  00007d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000014b1  00000000  00000000  00008c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000a140  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001f0  00000000  00000000  0000a180  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b3ce  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0000b3d1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b3d6  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b3d7  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000b3d8  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000b3e1  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000b3ea  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0000b3f3  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000023  00000000  00000000  0000b3fd  2**0
                  CONTENTS, READONLY
 26 .jdi          00007abf  00000000  00000000  0000b420  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000438da  00000000  00000000  00012edf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00010dc4 l    d  .rodata	00000000 .rodata
00010de8 l    d  .rwdata	00000000 .rwdata
00010fc0 l    d  .bss	00000000 .bss
00010fcc l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../c_program_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000102dc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00010de8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00010cf8 g     F .text	0000002c alt_main
00010ed4 g       *ABS*	00000000 __flash_rwdata_start
00010938 g     F .text	00000060 memmove
00010d24 g     F .text	00000038 alt_putstr
00010ed0 g     O .rwdata	00000004 jtag_uart
00010dbc g     F .text	00000008 altera_nios2_gen2_irq_init
00010890 g     F .text	000000a8 __sfvwrite_small_str
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010fc4 g     O .bss	00000004 alt_argv
00018ec8 g       *ABS*	00000000 _gp
00010130 g     F .text	00000044 SendMessage
00010aac g     F .text	00000064 .hidden __udivsi3
00010000 g       *ABS*	00000000 __alt_mem_ram
00010ec8 g     O .rwdata	00000004 _global_impure_ptr
00010fcc g       *ABS*	00000000 __bss_end
00010db4 g     F .text	00000004 alt_dcache_flush_all
00010ed4 g       *ABS*	00000000 __ram_rwdata_end
00010de8 g       *ABS*	00000000 __ram_rodata_end
00010b10 g     F .text	00000058 .hidden __umodsi3
00010fcc g       *ABS*	00000000 end
0001a1e0 g       *ABS*	00000000 __alt_stack_pointer
00010d80 g     F .text	00000034 altera_avalon_jtag_uart_write
00010200 g     F .text	00000064 _sprintf_r
00010020 g     F .text	0000003c _start
00010d7c g     F .text	00000004 alt_sys_init
00010b68 g     F .text	00000028 .hidden __mulsi3
00010de8 g       *ABS*	00000000 __ram_rwdata_start
00010dc4 g       *ABS*	00000000 __ram_rodata_start
00010b90 g     F .text	00000088 alt_busy_sleep
00010fcc g       *ABS*	00000000 __alt_stack_base
00010348 g     F .text	0000052c ___svfprintf_internal_r
00010fc0 g       *ABS*	00000000 __bss_start
00010174 g     F .text	0000008c main
00010fc0 g     O .bss	00000004 alt_envp
000109b4 g     F .text	00000084 .hidden __divsi3
00010dc4 g       *ABS*	00000000 __flash_rodata_start
00010d5c g     F .text	00000020 alt_irq_init
00010264 g     F .text	00000078 sprintf
00010ecc g     O .rwdata	00000004 _impure_ptr
00010fc8 g     O .bss	00000004 alt_argc
0001005c g     F .text	00000068 SendCommand
00010874 g     F .text	0000001c __vfprintf_internal_unused
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010ed4 g       *ABS*	00000000 _edata
00010fcc g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010a38 g     F .text	00000074 .hidden __modsi3
0001a1e0 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010998 g     F .text	0000001c strlen
00010db8 g     F .text	00000004 alt_icache_flush_all
000100c4 g     F .text	0000006c SendData
00010c18 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee87814 	ori	sp,sp,41440
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a3b214 	ori	gp,gp,36552
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1083f014 	ori	r2,r2,4032

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c3f314 	ori	r3,r3,4044

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff5e64>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	0010c180 	call	10c18 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	0010cf80 	call	10cf8 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff5e78>

0001005c <SendCommand>:

	return 0;
}

void SendCommand(alt_u8 cmd)
{
   1005c:	defffb04 	addi	sp,sp,-20
   10060:	dcc00315 	stw	r19,12(sp)
   10064:	dc400115 	stw	r17,4(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0400 | cmd);
   10068:	24c03fcc 	andi	r19,r4,255
   1006c:	044000b4 	movhi	r17,2

	return 0;
}

void SendCommand(alt_u8 cmd)
{
   10070:	dc800215 	stw	r18,8(sp)
   10074:	dfc00415 	stw	ra,16(sp)
   10078:	dc000015 	stw	r16,0(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0400 | cmd);
   1007c:	9c810014 	ori	r18,r19,1024
   10080:	8c440004 	addi	r17,r17,4096
   10084:	8c800035 	stwio	r18,0(r17)
	alt_busy_sleep(1000);
   10088:	0400fa04 	movi	r16,1000
   1008c:	8009883a 	mov	r4,r16
   10090:	0010b900 	call	10b90 <alt_busy_sleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0000 | cmd);
   10094:	8cc00035 	stwio	r19,0(r17)
	alt_busy_sleep(1000);
   10098:	8009883a 	mov	r4,r16
   1009c:	0010b900 	call	10b90 <alt_busy_sleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0400 | cmd);
   100a0:	8c800035 	stwio	r18,0(r17)
	alt_busy_sleep(1000);
   100a4:	8009883a 	mov	r4,r16
}
   100a8:	dfc00417 	ldw	ra,16(sp)
   100ac:	dcc00317 	ldw	r19,12(sp)
   100b0:	dc800217 	ldw	r18,8(sp)
   100b4:	dc400117 	ldw	r17,4(sp)
   100b8:	dc000017 	ldw	r16,0(sp)
   100bc:	dec00504 	addi	sp,sp,20
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0400 | cmd);
	alt_busy_sleep(1000);
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0000 | cmd);
	alt_busy_sleep(1000);
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0400 | cmd);
	alt_busy_sleep(1000);
   100c0:	0010b901 	jmpi	10b90 <alt_busy_sleep>

000100c4 <SendData>:
}

void SendData(alt_u8 data)
{
   100c4:	defffb04 	addi	sp,sp,-20
   100c8:	dc800215 	stw	r18,8(sp)
   100cc:	dc000015 	stw	r16,0(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0600 | data);
   100d0:	048000b4 	movhi	r18,2
   100d4:	24003fcc 	andi	r16,r4,255
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0400 | cmd);
	alt_busy_sleep(1000);
}

void SendData(alt_u8 data)
{
   100d8:	dcc00315 	stw	r19,12(sp)
   100dc:	dfc00415 	stw	ra,16(sp)
   100e0:	dc400115 	stw	r17,4(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0600 | data);
   100e4:	84c18014 	ori	r19,r16,1536
   100e8:	94840004 	addi	r18,r18,4096
   100ec:	94c00035 	stwio	r19,0(r18)
	alt_busy_sleep(1000);
   100f0:	0440fa04 	movi	r17,1000
   100f4:	8809883a 	mov	r4,r17
   100f8:	0010b900 	call	10b90 <alt_busy_sleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0200 | data);
   100fc:	84008014 	ori	r16,r16,512
   10100:	94000035 	stwio	r16,0(r18)
	alt_busy_sleep(1000);
   10104:	8809883a 	mov	r4,r17
   10108:	0010b900 	call	10b90 <alt_busy_sleep>
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0600 | data);
   1010c:	94c00035 	stwio	r19,0(r18)
	alt_busy_sleep(1000);
   10110:	8809883a 	mov	r4,r17
}
   10114:	dfc00417 	ldw	ra,16(sp)
   10118:	dcc00317 	ldw	r19,12(sp)
   1011c:	dc800217 	ldw	r18,8(sp)
   10120:	dc400117 	ldw	r17,4(sp)
   10124:	dc000017 	ldw	r16,0(sp)
   10128:	dec00504 	addi	sp,sp,20
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0600 | data);
	alt_busy_sleep(1000);
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0200 | data);
	alt_busy_sleep(1000);
	IOWR_ALTERA_AVALON_PIO_DATA(LCD_BASE, 0x0600 | data);
	alt_busy_sleep(1000);
   1012c:	0010b901 	jmpi	10b90 <alt_busy_sleep>

00010130 <SendMessage>:
}

void SendMessage(char *msg)
{
   10130:	defffe04 	addi	sp,sp,-8
   10134:	dc000015 	stw	r16,0(sp)
   10138:	dfc00115 	stw	ra,4(sp)
   1013c:	2021883a 	mov	r16,r4
	for(; *msg!= 0; msg++)
   10140:	81000003 	ldbu	r4,0(r16)
   10144:	20803fcc 	andi	r2,r4,255
   10148:	1080201c 	xori	r2,r2,128
   1014c:	10bfe004 	addi	r2,r2,-128
   10150:	10000426 	beq	r2,zero,10164 <SendMessage+0x34>
	{
		SendData(*msg);
   10154:	21003fcc 	andi	r4,r4,255
   10158:	00100c40 	call	100c4 <SendData>
	alt_busy_sleep(1000);
}

void SendMessage(char *msg)
{
	for(; *msg!= 0; msg++)
   1015c:	84000044 	addi	r16,r16,1
   10160:	003ff706 	br	10140 <__alt_data_end+0xffff5f60>
	{
		SendData(*msg);
	}
}
   10164:	dfc00117 	ldw	ra,4(sp)
   10168:	dc000017 	ldw	r16,0(sp)
   1016c:	dec00204 	addi	sp,sp,8
   10170:	f800283a 	ret

00010174 <main>:
int main()
{ 
	int speed_datain;
	//int adc_data;
	char str[10] = "";
	alt_putstr("Hello from Nios II!\n");
   10174:	01000074 	movhi	r4,1
void SendCommand(alt_u8 cmd);
void SendData(alt_u8 data);
void SendMessage(char *msg);

int main()
{ 
   10178:	defffb04 	addi	sp,sp,-20
	int speed_datain;
	//int adc_data;
	char str[10] = "";
	alt_putstr("Hello from Nios II!\n");
   1017c:	21037104 	addi	r4,r4,3524
void SendCommand(alt_u8 cmd);
void SendData(alt_u8 data);
void SendMessage(char *msg);

int main()
{ 
   10180:	dfc00415 	stw	ra,16(sp)
   10184:	dc000315 	stw	r16,12(sp)
	int speed_datain;
	//int adc_data;
	char str[10] = "";
   10188:	d8000015 	stw	zero,0(sp)
   1018c:	d8000115 	stw	zero,4(sp)
   10190:	d800020d 	sth	zero,8(sp)
	alt_putstr("Hello from Nios II!\n");
   10194:	0010d240 	call	10d24 <alt_putstr>

	//Initialize LCD
	SendCommand(0x0038);
   10198:	01000e04 	movi	r4,56
   1019c:	001005c0 	call	1005c <SendCommand>
	SendCommand(0x000F);
   101a0:	010003c4 	movi	r4,15
   101a4:	001005c0 	call	1005c <SendCommand>
	SendCommand(0x0001);
   101a8:	01000044 	movi	r4,1
   101ac:	001005c0 	call	1005c <SendCommand>
	SendCommand(0x0006);
   101b0:	01000184 	movi	r4,6


	/* Event loop never exits. */
	while (1)
	{
		speed_datain = IORD_ALTERA_AVALON_PIO_DATA(SPEED_REF_BASE);
   101b4:	040000b4 	movhi	r16,2

	//Initialize LCD
	SendCommand(0x0038);
	SendCommand(0x000F);
	SendCommand(0x0001);
	SendCommand(0x0006);
   101b8:	001005c0 	call	1005c <SendCommand>


	/* Event loop never exits. */
	while (1)
	{
		speed_datain = IORD_ALTERA_AVALON_PIO_DATA(SPEED_REF_BASE);
   101bc:	84040404 	addi	r16,r16,4112
		//adc_data = IORD_ALTERA_AVALON_PIO_DATA(ADC_DATA_BASE);
		sprintf(str, "%d", speed_datain);
   101c0:	81800037 	ldwio	r6,0(r16)
   101c4:	01400074 	movhi	r5,1
   101c8:	29437704 	addi	r5,r5,3548
   101cc:	d809883a 	mov	r4,sp
   101d0:	00102640 	call	10264 <sprintf>
		//Write first line message to LCD
		SendMessage("RPM: ");
   101d4:	01000074 	movhi	r4,1
   101d8:	21037804 	addi	r4,r4,3552
   101dc:	00101300 	call	10130 <SendMessage>

		//Change DDRAM location to 40H to map to the second line
		//SendCommand(0x00C0);
		SendMessage(str);
   101e0:	d809883a 	mov	r4,sp
   101e4:	00101300 	call	10130 <SendMessage>
		alt_busy_sleep(100000);
   101e8:	010000b4 	movhi	r4,2
   101ec:	2121a804 	addi	r4,r4,-31072
   101f0:	0010b900 	call	10b90 <alt_busy_sleep>

		//Display Clear;
		SendCommand(0x0001);
   101f4:	01000044 	movi	r4,1
   101f8:	001005c0 	call	1005c <SendCommand>
   101fc:	003ff006 	br	101c0 <__alt_data_end+0xffff5fe0>

00010200 <_sprintf_r>:
   10200:	defff704 	addi	sp,sp,-36
   10204:	dfc00715 	stw	ra,28(sp)
   10208:	d9c00815 	stw	r7,32(sp)
   1020c:	00808204 	movi	r2,520
   10210:	d880000d 	sth	r2,0(sp)
   10214:	00a00034 	movhi	r2,32768
   10218:	10bfffc4 	addi	r2,r2,-1
   1021c:	d8800515 	stw	r2,20(sp)
   10220:	d8800315 	stw	r2,12(sp)
   10224:	00bfffc4 	movi	r2,-1
   10228:	d880008d 	sth	r2,2(sp)
   1022c:	00800074 	movhi	r2,1
   10230:	d9400415 	stw	r5,16(sp)
   10234:	d9400215 	stw	r5,8(sp)
   10238:	10822404 	addi	r2,r2,2192
   1023c:	d9c00804 	addi	r7,sp,32
   10240:	d80b883a 	mov	r5,sp
   10244:	d8800115 	stw	r2,4(sp)
   10248:	d8000615 	stw	zero,24(sp)
   1024c:	00103480 	call	10348 <___svfprintf_internal_r>
   10250:	d8c00417 	ldw	r3,16(sp)
   10254:	18000005 	stb	zero,0(r3)
   10258:	dfc00717 	ldw	ra,28(sp)
   1025c:	dec00904 	addi	sp,sp,36
   10260:	f800283a 	ret

00010264 <sprintf>:
   10264:	defff604 	addi	sp,sp,-40
   10268:	dfc00715 	stw	ra,28(sp)
   1026c:	d9800815 	stw	r6,32(sp)
   10270:	d9c00915 	stw	r7,36(sp)
   10274:	00808204 	movi	r2,520
   10278:	d880000d 	sth	r2,0(sp)
   1027c:	00a00034 	movhi	r2,32768
   10280:	10bfffc4 	addi	r2,r2,-1
   10284:	d8800515 	stw	r2,20(sp)
   10288:	d8800315 	stw	r2,12(sp)
   1028c:	00bfffc4 	movi	r2,-1
   10290:	d880008d 	sth	r2,2(sp)
   10294:	00800074 	movhi	r2,1
   10298:	10822404 	addi	r2,r2,2192
   1029c:	d8800115 	stw	r2,4(sp)
   102a0:	00800074 	movhi	r2,1
   102a4:	1083b304 	addi	r2,r2,3788
   102a8:	d9000415 	stw	r4,16(sp)
   102ac:	d9000215 	stw	r4,8(sp)
   102b0:	11000017 	ldw	r4,0(r2)
   102b4:	280d883a 	mov	r6,r5
   102b8:	d9c00804 	addi	r7,sp,32
   102bc:	d80b883a 	mov	r5,sp
   102c0:	d8000615 	stw	zero,24(sp)
   102c4:	00103480 	call	10348 <___svfprintf_internal_r>
   102c8:	d8c00417 	ldw	r3,16(sp)
   102cc:	18000005 	stb	zero,0(r3)
   102d0:	dfc00717 	ldw	ra,28(sp)
   102d4:	dec00a04 	addi	sp,sp,40
   102d8:	f800283a 	ret

000102dc <print_repeat>:
   102dc:	defffb04 	addi	sp,sp,-20
   102e0:	dc800315 	stw	r18,12(sp)
   102e4:	dc400215 	stw	r17,8(sp)
   102e8:	dc000115 	stw	r16,4(sp)
   102ec:	dfc00415 	stw	ra,16(sp)
   102f0:	2025883a 	mov	r18,r4
   102f4:	2823883a 	mov	r17,r5
   102f8:	d9800005 	stb	r6,0(sp)
   102fc:	3821883a 	mov	r16,r7
   10300:	04000a0e 	bge	zero,r16,1032c <print_repeat+0x50>
   10304:	88800117 	ldw	r2,4(r17)
   10308:	01c00044 	movi	r7,1
   1030c:	d80d883a 	mov	r6,sp
   10310:	880b883a 	mov	r5,r17
   10314:	9009883a 	mov	r4,r18
   10318:	103ee83a 	callr	r2
   1031c:	843fffc4 	addi	r16,r16,-1
   10320:	103ff726 	beq	r2,zero,10300 <__alt_data_end+0xffff6120>
   10324:	00bfffc4 	movi	r2,-1
   10328:	00000106 	br	10330 <print_repeat+0x54>
   1032c:	0005883a 	mov	r2,zero
   10330:	dfc00417 	ldw	ra,16(sp)
   10334:	dc800317 	ldw	r18,12(sp)
   10338:	dc400217 	ldw	r17,8(sp)
   1033c:	dc000117 	ldw	r16,4(sp)
   10340:	dec00504 	addi	sp,sp,20
   10344:	f800283a 	ret

00010348 <___svfprintf_internal_r>:
   10348:	deffe504 	addi	sp,sp,-108
   1034c:	d8c00804 	addi	r3,sp,32
   10350:	ddc01815 	stw	r23,96(sp)
   10354:	dd801715 	stw	r22,92(sp)
   10358:	dd401615 	stw	r21,88(sp)
   1035c:	dd001515 	stw	r20,84(sp)
   10360:	dcc01415 	stw	r19,80(sp)
   10364:	dc801315 	stw	r18,76(sp)
   10368:	dc401215 	stw	r17,72(sp)
   1036c:	dc001115 	stw	r16,68(sp)
   10370:	dfc01a15 	stw	ra,104(sp)
   10374:	df001915 	stw	fp,100(sp)
   10378:	2029883a 	mov	r20,r4
   1037c:	2823883a 	mov	r17,r5
   10380:	382d883a 	mov	r22,r7
   10384:	d9800f15 	stw	r6,60(sp)
   10388:	0021883a 	mov	r16,zero
   1038c:	d8000e15 	stw	zero,56(sp)
   10390:	d8000a15 	stw	zero,40(sp)
   10394:	002b883a 	mov	r21,zero
   10398:	0027883a 	mov	r19,zero
   1039c:	0025883a 	mov	r18,zero
   103a0:	d8000c15 	stw	zero,48(sp)
   103a4:	d8000b15 	stw	zero,44(sp)
   103a8:	002f883a 	mov	r23,zero
   103ac:	d8c00915 	stw	r3,36(sp)
   103b0:	d8c00f17 	ldw	r3,60(sp)
   103b4:	19000003 	ldbu	r4,0(r3)
   103b8:	20803fcc 	andi	r2,r4,255
   103bc:	1080201c 	xori	r2,r2,128
   103c0:	10bfe004 	addi	r2,r2,-128
   103c4:	10011e26 	beq	r2,zero,10840 <___svfprintf_internal_r+0x4f8>
   103c8:	00c00044 	movi	r3,1
   103cc:	b8c01426 	beq	r23,r3,10420 <___svfprintf_internal_r+0xd8>
   103d0:	1dc00216 	blt	r3,r23,103dc <___svfprintf_internal_r+0x94>
   103d4:	b8000626 	beq	r23,zero,103f0 <___svfprintf_internal_r+0xa8>
   103d8:	00011506 	br	10830 <___svfprintf_internal_r+0x4e8>
   103dc:	01400084 	movi	r5,2
   103e0:	b9401d26 	beq	r23,r5,10458 <___svfprintf_internal_r+0x110>
   103e4:	014000c4 	movi	r5,3
   103e8:	b9402b26 	beq	r23,r5,10498 <___svfprintf_internal_r+0x150>
   103ec:	00011006 	br	10830 <___svfprintf_internal_r+0x4e8>
   103f0:	01400944 	movi	r5,37
   103f4:	1140fc26 	beq	r2,r5,107e8 <___svfprintf_internal_r+0x4a0>
   103f8:	88800117 	ldw	r2,4(r17)
   103fc:	d9000005 	stb	r4,0(sp)
   10400:	01c00044 	movi	r7,1
   10404:	d80d883a 	mov	r6,sp
   10408:	880b883a 	mov	r5,r17
   1040c:	a009883a 	mov	r4,r20
   10410:	103ee83a 	callr	r2
   10414:	1000d81e 	bne	r2,zero,10778 <___svfprintf_internal_r+0x430>
   10418:	84000044 	addi	r16,r16,1
   1041c:	00010406 	br	10830 <___svfprintf_internal_r+0x4e8>
   10420:	01400c04 	movi	r5,48
   10424:	1140fa26 	beq	r2,r5,10810 <___svfprintf_internal_r+0x4c8>
   10428:	01400944 	movi	r5,37
   1042c:	11400a1e 	bne	r2,r5,10458 <___svfprintf_internal_r+0x110>
   10430:	d8800005 	stb	r2,0(sp)
   10434:	88800117 	ldw	r2,4(r17)
   10438:	b80f883a 	mov	r7,r23
   1043c:	d80d883a 	mov	r6,sp
   10440:	880b883a 	mov	r5,r17
   10444:	a009883a 	mov	r4,r20
   10448:	103ee83a 	callr	r2
   1044c:	1000ca1e 	bne	r2,zero,10778 <___svfprintf_internal_r+0x430>
   10450:	84000044 	addi	r16,r16,1
   10454:	0000f506 	br	1082c <___svfprintf_internal_r+0x4e4>
   10458:	25fff404 	addi	r23,r4,-48
   1045c:	bdc03fcc 	andi	r23,r23,255
   10460:	00c00244 	movi	r3,9
   10464:	1dc00936 	bltu	r3,r23,1048c <___svfprintf_internal_r+0x144>
   10468:	00bfffc4 	movi	r2,-1
   1046c:	90800426 	beq	r18,r2,10480 <___svfprintf_internal_r+0x138>
   10470:	01400284 	movi	r5,10
   10474:	9009883a 	mov	r4,r18
   10478:	0010b680 	call	10b68 <__mulsi3>
   1047c:	00000106 	br	10484 <___svfprintf_internal_r+0x13c>
   10480:	0005883a 	mov	r2,zero
   10484:	b8a5883a 	add	r18,r23,r2
   10488:	0000e206 	br	10814 <___svfprintf_internal_r+0x4cc>
   1048c:	01400b84 	movi	r5,46
   10490:	1140e426 	beq	r2,r5,10824 <___svfprintf_internal_r+0x4dc>
   10494:	05c00084 	movi	r23,2
   10498:	213ff404 	addi	r4,r4,-48
   1049c:	27003fcc 	andi	fp,r4,255
   104a0:	00c00244 	movi	r3,9
   104a4:	1f000936 	bltu	r3,fp,104cc <___svfprintf_internal_r+0x184>
   104a8:	00bfffc4 	movi	r2,-1
   104ac:	98800426 	beq	r19,r2,104c0 <___svfprintf_internal_r+0x178>
   104b0:	01400284 	movi	r5,10
   104b4:	9809883a 	mov	r4,r19
   104b8:	0010b680 	call	10b68 <__mulsi3>
   104bc:	00000106 	br	104c4 <___svfprintf_internal_r+0x17c>
   104c0:	0005883a 	mov	r2,zero
   104c4:	e0a7883a 	add	r19,fp,r2
   104c8:	0000d906 	br	10830 <___svfprintf_internal_r+0x4e8>
   104cc:	00c01b04 	movi	r3,108
   104d0:	10c0d226 	beq	r2,r3,1081c <___svfprintf_internal_r+0x4d4>
   104d4:	013fffc4 	movi	r4,-1
   104d8:	99000226 	beq	r19,r4,104e4 <___svfprintf_internal_r+0x19c>
   104dc:	d8000b15 	stw	zero,44(sp)
   104e0:	00000106 	br	104e8 <___svfprintf_internal_r+0x1a0>
   104e4:	04c00044 	movi	r19,1
   104e8:	01001a44 	movi	r4,105
   104ec:	11001626 	beq	r2,r4,10548 <___svfprintf_internal_r+0x200>
   104f0:	20800916 	blt	r4,r2,10518 <___svfprintf_internal_r+0x1d0>
   104f4:	010018c4 	movi	r4,99
   104f8:	11008826 	beq	r2,r4,1071c <___svfprintf_internal_r+0x3d4>
   104fc:	01001904 	movi	r4,100
   10500:	11001126 	beq	r2,r4,10548 <___svfprintf_internal_r+0x200>
   10504:	01001604 	movi	r4,88
   10508:	1100c81e 	bne	r2,r4,1082c <___svfprintf_internal_r+0x4e4>
   1050c:	00c00044 	movi	r3,1
   10510:	d8c00e15 	stw	r3,56(sp)
   10514:	00001506 	br	1056c <___svfprintf_internal_r+0x224>
   10518:	01001cc4 	movi	r4,115
   1051c:	11009826 	beq	r2,r4,10780 <___svfprintf_internal_r+0x438>
   10520:	20800416 	blt	r4,r2,10534 <___svfprintf_internal_r+0x1ec>
   10524:	01001bc4 	movi	r4,111
   10528:	1100c01e 	bne	r2,r4,1082c <___svfprintf_internal_r+0x4e4>
   1052c:	05400204 	movi	r21,8
   10530:	00000f06 	br	10570 <___svfprintf_internal_r+0x228>
   10534:	01001d44 	movi	r4,117
   10538:	11000d26 	beq	r2,r4,10570 <___svfprintf_internal_r+0x228>
   1053c:	01001e04 	movi	r4,120
   10540:	11000a26 	beq	r2,r4,1056c <___svfprintf_internal_r+0x224>
   10544:	0000b906 	br	1082c <___svfprintf_internal_r+0x4e4>
   10548:	d8c00a17 	ldw	r3,40(sp)
   1054c:	b7000104 	addi	fp,r22,4
   10550:	18000726 	beq	r3,zero,10570 <___svfprintf_internal_r+0x228>
   10554:	df000d15 	stw	fp,52(sp)
   10558:	b5c00017 	ldw	r23,0(r22)
   1055c:	b800080e 	bge	r23,zero,10580 <___svfprintf_internal_r+0x238>
   10560:	05efc83a 	sub	r23,zero,r23
   10564:	02400044 	movi	r9,1
   10568:	00000606 	br	10584 <___svfprintf_internal_r+0x23c>
   1056c:	05400404 	movi	r21,16
   10570:	b0c00104 	addi	r3,r22,4
   10574:	d8c00d15 	stw	r3,52(sp)
   10578:	b5c00017 	ldw	r23,0(r22)
   1057c:	d8000a15 	stw	zero,40(sp)
   10580:	0013883a 	mov	r9,zero
   10584:	d839883a 	mov	fp,sp
   10588:	b8001726 	beq	r23,zero,105e8 <___svfprintf_internal_r+0x2a0>
   1058c:	a80b883a 	mov	r5,r21
   10590:	b809883a 	mov	r4,r23
   10594:	da401015 	stw	r9,64(sp)
   10598:	0010aac0 	call	10aac <__udivsi3>
   1059c:	a80b883a 	mov	r5,r21
   105a0:	1009883a 	mov	r4,r2
   105a4:	102d883a 	mov	r22,r2
   105a8:	0010b680 	call	10b68 <__mulsi3>
   105ac:	b885c83a 	sub	r2,r23,r2
   105b0:	00c00244 	movi	r3,9
   105b4:	da401017 	ldw	r9,64(sp)
   105b8:	18800216 	blt	r3,r2,105c4 <___svfprintf_internal_r+0x27c>
   105bc:	10800c04 	addi	r2,r2,48
   105c0:	00000506 	br	105d8 <___svfprintf_internal_r+0x290>
   105c4:	d8c00e17 	ldw	r3,56(sp)
   105c8:	18000226 	beq	r3,zero,105d4 <___svfprintf_internal_r+0x28c>
   105cc:	10800dc4 	addi	r2,r2,55
   105d0:	00000106 	br	105d8 <___svfprintf_internal_r+0x290>
   105d4:	108015c4 	addi	r2,r2,87
   105d8:	e0800005 	stb	r2,0(fp)
   105dc:	b02f883a 	mov	r23,r22
   105e0:	e7000044 	addi	fp,fp,1
   105e4:	003fe806 	br	10588 <__alt_data_end+0xffff63a8>
   105e8:	e6efc83a 	sub	r23,fp,sp
   105ec:	9dc5c83a 	sub	r2,r19,r23
   105f0:	0080090e 	bge	zero,r2,10618 <___svfprintf_internal_r+0x2d0>
   105f4:	e085883a 	add	r2,fp,r2
   105f8:	01400c04 	movi	r5,48
   105fc:	d8c00917 	ldw	r3,36(sp)
   10600:	e009883a 	mov	r4,fp
   10604:	e0c0032e 	bgeu	fp,r3,10614 <___svfprintf_internal_r+0x2cc>
   10608:	e7000044 	addi	fp,fp,1
   1060c:	21400005 	stb	r5,0(r4)
   10610:	e0bffa1e 	bne	fp,r2,105fc <__alt_data_end+0xffff641c>
   10614:	e6efc83a 	sub	r23,fp,sp
   10618:	d8c00b17 	ldw	r3,44(sp)
   1061c:	4dd1883a 	add	r8,r9,r23
   10620:	922dc83a 	sub	r22,r18,r8
   10624:	18001626 	beq	r3,zero,10680 <___svfprintf_internal_r+0x338>
   10628:	48000a26 	beq	r9,zero,10654 <___svfprintf_internal_r+0x30c>
   1062c:	00800b44 	movi	r2,45
   10630:	d8800805 	stb	r2,32(sp)
   10634:	88800117 	ldw	r2,4(r17)
   10638:	01c00044 	movi	r7,1
   1063c:	d9800804 	addi	r6,sp,32
   10640:	880b883a 	mov	r5,r17
   10644:	a009883a 	mov	r4,r20
   10648:	103ee83a 	callr	r2
   1064c:	10004a1e 	bne	r2,zero,10778 <___svfprintf_internal_r+0x430>
   10650:	84000044 	addi	r16,r16,1
   10654:	0580070e 	bge	zero,r22,10674 <___svfprintf_internal_r+0x32c>
   10658:	b00f883a 	mov	r7,r22
   1065c:	01800c04 	movi	r6,48
   10660:	880b883a 	mov	r5,r17
   10664:	a009883a 	mov	r4,r20
   10668:	00102dc0 	call	102dc <print_repeat>
   1066c:	1000421e 	bne	r2,zero,10778 <___svfprintf_internal_r+0x430>
   10670:	85a1883a 	add	r16,r16,r22
   10674:	e02d883a 	mov	r22,fp
   10678:	bf2fc83a 	sub	r23,r23,fp
   1067c:	00002006 	br	10700 <___svfprintf_internal_r+0x3b8>
   10680:	0580090e 	bge	zero,r22,106a8 <___svfprintf_internal_r+0x360>
   10684:	b00f883a 	mov	r7,r22
   10688:	01800804 	movi	r6,32
   1068c:	880b883a 	mov	r5,r17
   10690:	a009883a 	mov	r4,r20
   10694:	da401015 	stw	r9,64(sp)
   10698:	00102dc0 	call	102dc <print_repeat>
   1069c:	da401017 	ldw	r9,64(sp)
   106a0:	1000351e 	bne	r2,zero,10778 <___svfprintf_internal_r+0x430>
   106a4:	85a1883a 	add	r16,r16,r22
   106a8:	483ff226 	beq	r9,zero,10674 <__alt_data_end+0xffff6494>
   106ac:	00800b44 	movi	r2,45
   106b0:	d8800805 	stb	r2,32(sp)
   106b4:	88800117 	ldw	r2,4(r17)
   106b8:	01c00044 	movi	r7,1
   106bc:	d9800804 	addi	r6,sp,32
   106c0:	880b883a 	mov	r5,r17
   106c4:	a009883a 	mov	r4,r20
   106c8:	103ee83a 	callr	r2
   106cc:	10002a1e 	bne	r2,zero,10778 <___svfprintf_internal_r+0x430>
   106d0:	84000044 	addi	r16,r16,1
   106d4:	003fe706 	br	10674 <__alt_data_end+0xffff6494>
   106d8:	b5bfffc4 	addi	r22,r22,-1
   106dc:	b0800003 	ldbu	r2,0(r22)
   106e0:	01c00044 	movi	r7,1
   106e4:	d9800804 	addi	r6,sp,32
   106e8:	d8800805 	stb	r2,32(sp)
   106ec:	88800117 	ldw	r2,4(r17)
   106f0:	880b883a 	mov	r5,r17
   106f4:	a009883a 	mov	r4,r20
   106f8:	103ee83a 	callr	r2
   106fc:	10001e1e 	bne	r2,zero,10778 <___svfprintf_internal_r+0x430>
   10700:	8585c83a 	sub	r2,r16,r22
   10704:	b5c9883a 	add	r4,r22,r23
   10708:	e085883a 	add	r2,fp,r2
   1070c:	013ff216 	blt	zero,r4,106d8 <__alt_data_end+0xffff64f8>
   10710:	1021883a 	mov	r16,r2
   10714:	dd800d17 	ldw	r22,52(sp)
   10718:	00004406 	br	1082c <___svfprintf_internal_r+0x4e4>
   1071c:	00800044 	movi	r2,1
   10720:	1480080e 	bge	r2,r18,10744 <___svfprintf_internal_r+0x3fc>
   10724:	95ffffc4 	addi	r23,r18,-1
   10728:	b80f883a 	mov	r7,r23
   1072c:	01800804 	movi	r6,32
   10730:	880b883a 	mov	r5,r17
   10734:	a009883a 	mov	r4,r20
   10738:	00102dc0 	call	102dc <print_repeat>
   1073c:	10000e1e 	bne	r2,zero,10778 <___svfprintf_internal_r+0x430>
   10740:	85e1883a 	add	r16,r16,r23
   10744:	b0800017 	ldw	r2,0(r22)
   10748:	01c00044 	movi	r7,1
   1074c:	d80d883a 	mov	r6,sp
   10750:	d8800005 	stb	r2,0(sp)
   10754:	88800117 	ldw	r2,4(r17)
   10758:	880b883a 	mov	r5,r17
   1075c:	a009883a 	mov	r4,r20
   10760:	b5c00104 	addi	r23,r22,4
   10764:	103ee83a 	callr	r2
   10768:	1000031e 	bne	r2,zero,10778 <___svfprintf_internal_r+0x430>
   1076c:	84000044 	addi	r16,r16,1
   10770:	b82d883a 	mov	r22,r23
   10774:	00002d06 	br	1082c <___svfprintf_internal_r+0x4e4>
   10778:	00bfffc4 	movi	r2,-1
   1077c:	00003106 	br	10844 <___svfprintf_internal_r+0x4fc>
   10780:	b5c00017 	ldw	r23,0(r22)
   10784:	b7000104 	addi	fp,r22,4
   10788:	b809883a 	mov	r4,r23
   1078c:	00109980 	call	10998 <strlen>
   10790:	9091c83a 	sub	r8,r18,r2
   10794:	102d883a 	mov	r22,r2
   10798:	0200090e 	bge	zero,r8,107c0 <___svfprintf_internal_r+0x478>
   1079c:	400f883a 	mov	r7,r8
   107a0:	01800804 	movi	r6,32
   107a4:	880b883a 	mov	r5,r17
   107a8:	a009883a 	mov	r4,r20
   107ac:	da001015 	stw	r8,64(sp)
   107b0:	00102dc0 	call	102dc <print_repeat>
   107b4:	da001017 	ldw	r8,64(sp)
   107b8:	103fef1e 	bne	r2,zero,10778 <__alt_data_end+0xffff6598>
   107bc:	8221883a 	add	r16,r16,r8
   107c0:	88800117 	ldw	r2,4(r17)
   107c4:	b00f883a 	mov	r7,r22
   107c8:	b80d883a 	mov	r6,r23
   107cc:	880b883a 	mov	r5,r17
   107d0:	a009883a 	mov	r4,r20
   107d4:	103ee83a 	callr	r2
   107d8:	103fe71e 	bne	r2,zero,10778 <__alt_data_end+0xffff6598>
   107dc:	85a1883a 	add	r16,r16,r22
   107e0:	e02d883a 	mov	r22,fp
   107e4:	00001106 	br	1082c <___svfprintf_internal_r+0x4e4>
   107e8:	00c00044 	movi	r3,1
   107ec:	04ffffc4 	movi	r19,-1
   107f0:	d8000e15 	stw	zero,56(sp)
   107f4:	d8c00a15 	stw	r3,40(sp)
   107f8:	05400284 	movi	r21,10
   107fc:	9825883a 	mov	r18,r19
   10800:	d8000c15 	stw	zero,48(sp)
   10804:	d8000b15 	stw	zero,44(sp)
   10808:	182f883a 	mov	r23,r3
   1080c:	00000806 	br	10830 <___svfprintf_internal_r+0x4e8>
   10810:	ddc00b15 	stw	r23,44(sp)
   10814:	05c00084 	movi	r23,2
   10818:	00000506 	br	10830 <___svfprintf_internal_r+0x4e8>
   1081c:	00c00044 	movi	r3,1
   10820:	d8c00c15 	stw	r3,48(sp)
   10824:	05c000c4 	movi	r23,3
   10828:	00000106 	br	10830 <___svfprintf_internal_r+0x4e8>
   1082c:	002f883a 	mov	r23,zero
   10830:	d8c00f17 	ldw	r3,60(sp)
   10834:	18c00044 	addi	r3,r3,1
   10838:	d8c00f15 	stw	r3,60(sp)
   1083c:	003edc06 	br	103b0 <__alt_data_end+0xffff61d0>
   10840:	8005883a 	mov	r2,r16
   10844:	dfc01a17 	ldw	ra,104(sp)
   10848:	df001917 	ldw	fp,100(sp)
   1084c:	ddc01817 	ldw	r23,96(sp)
   10850:	dd801717 	ldw	r22,92(sp)
   10854:	dd401617 	ldw	r21,88(sp)
   10858:	dd001517 	ldw	r20,84(sp)
   1085c:	dcc01417 	ldw	r19,80(sp)
   10860:	dc801317 	ldw	r18,76(sp)
   10864:	dc401217 	ldw	r17,72(sp)
   10868:	dc001117 	ldw	r16,68(sp)
   1086c:	dec01b04 	addi	sp,sp,108
   10870:	f800283a 	ret

00010874 <__vfprintf_internal_unused>:
   10874:	00800074 	movhi	r2,1
   10878:	1083b304 	addi	r2,r2,3788
   1087c:	300f883a 	mov	r7,r6
   10880:	280d883a 	mov	r6,r5
   10884:	200b883a 	mov	r5,r4
   10888:	11000017 	ldw	r4,0(r2)
   1088c:	00103481 	jmpi	10348 <___svfprintf_internal_r>

00010890 <__sfvwrite_small_str>:
   10890:	2880000b 	ldhu	r2,0(r5)
   10894:	10c0020c 	andi	r3,r2,8
   10898:	18002026 	beq	r3,zero,1091c <__sfvwrite_small_str+0x8c>
   1089c:	28c0008f 	ldh	r3,2(r5)
   108a0:	defffd04 	addi	sp,sp,-12
   108a4:	dc000015 	stw	r16,0(sp)
   108a8:	dfc00215 	stw	ra,8(sp)
   108ac:	dc400115 	stw	r17,4(sp)
   108b0:	2821883a 	mov	r16,r5
   108b4:	1800150e 	bge	r3,zero,1090c <__sfvwrite_small_str+0x7c>
   108b8:	10c0800c 	andi	r3,r2,512
   108bc:	18001326 	beq	r3,zero,1090c <__sfvwrite_small_str+0x7c>
   108c0:	2c400517 	ldw	r17,20(r5)
   108c4:	89c0030e 	bge	r17,r7,108d4 <__sfvwrite_small_str+0x44>
   108c8:	10c0200c 	andi	r3,r2,128
   108cc:	18000326 	beq	r3,zero,108dc <__sfvwrite_small_str+0x4c>
   108d0:	00000e06 	br	1090c <__sfvwrite_small_str+0x7c>
   108d4:	3c40010e 	bge	r7,r17,108dc <__sfvwrite_small_str+0x4c>
   108d8:	3823883a 	mov	r17,r7
   108dc:	81000417 	ldw	r4,16(r16)
   108e0:	300b883a 	mov	r5,r6
   108e4:	880d883a 	mov	r6,r17
   108e8:	00109380 	call	10938 <memmove>
   108ec:	80800517 	ldw	r2,20(r16)
   108f0:	1445c83a 	sub	r2,r2,r17
   108f4:	80800515 	stw	r2,20(r16)
   108f8:	80800417 	ldw	r2,16(r16)
   108fc:	1463883a 	add	r17,r2,r17
   10900:	84400415 	stw	r17,16(r16)
   10904:	0005883a 	mov	r2,zero
   10908:	00000606 	br	10924 <__sfvwrite_small_str+0x94>
   1090c:	10801014 	ori	r2,r2,64
   10910:	8080000d 	sth	r2,0(r16)
   10914:	00bfffc4 	movi	r2,-1
   10918:	00000206 	br	10924 <__sfvwrite_small_str+0x94>
   1091c:	00bfffc4 	movi	r2,-1
   10920:	f800283a 	ret
   10924:	dfc00217 	ldw	ra,8(sp)
   10928:	dc400117 	ldw	r17,4(sp)
   1092c:	dc000017 	ldw	r16,0(sp)
   10930:	dec00304 	addi	sp,sp,12
   10934:	f800283a 	ret

00010938 <memmove>:
   10938:	2005883a 	mov	r2,r4
   1093c:	218f883a 	add	r7,r4,r6
   10940:	29000236 	bltu	r5,r4,1094c <memmove+0x14>
   10944:	1007883a 	mov	r3,r2
   10948:	00000c06 	br	1097c <memmove+0x44>
   1094c:	2987883a 	add	r3,r5,r6
   10950:	20fffc2e 	bgeu	r4,r3,10944 <__alt_data_end+0xffff6764>
   10954:	380b883a 	mov	r5,r7
   10958:	30cdc83a 	sub	r6,r6,r3
   1095c:	1989883a 	add	r4,r3,r6
   10960:	20000526 	beq	r4,zero,10978 <memmove+0x40>
   10964:	18ffffc4 	addi	r3,r3,-1
   10968:	19000003 	ldbu	r4,0(r3)
   1096c:	297fffc4 	addi	r5,r5,-1
   10970:	29000005 	stb	r4,0(r5)
   10974:	003ff906 	br	1095c <__alt_data_end+0xffff677c>
   10978:	f800283a 	ret
   1097c:	19c00526 	beq	r3,r7,10994 <memmove+0x5c>
   10980:	29000003 	ldbu	r4,0(r5)
   10984:	18c00044 	addi	r3,r3,1
   10988:	29400044 	addi	r5,r5,1
   1098c:	193fffc5 	stb	r4,-1(r3)
   10990:	003ffa06 	br	1097c <__alt_data_end+0xffff679c>
   10994:	f800283a 	ret

00010998 <strlen>:
   10998:	2005883a 	mov	r2,r4
   1099c:	10c00007 	ldb	r3,0(r2)
   109a0:	18000226 	beq	r3,zero,109ac <strlen+0x14>
   109a4:	10800044 	addi	r2,r2,1
   109a8:	003ffc06 	br	1099c <__alt_data_end+0xffff67bc>
   109ac:	1105c83a 	sub	r2,r2,r4
   109b0:	f800283a 	ret

000109b4 <__divsi3>:
   109b4:	20001b16 	blt	r4,zero,10a24 <__divsi3+0x70>
   109b8:	000f883a 	mov	r7,zero
   109bc:	28001616 	blt	r5,zero,10a18 <__divsi3+0x64>
   109c0:	200d883a 	mov	r6,r4
   109c4:	29001a2e 	bgeu	r5,r4,10a30 <__divsi3+0x7c>
   109c8:	00800804 	movi	r2,32
   109cc:	00c00044 	movi	r3,1
   109d0:	00000106 	br	109d8 <__divsi3+0x24>
   109d4:	10000d26 	beq	r2,zero,10a0c <__divsi3+0x58>
   109d8:	294b883a 	add	r5,r5,r5
   109dc:	10bfffc4 	addi	r2,r2,-1
   109e0:	18c7883a 	add	r3,r3,r3
   109e4:	293ffb36 	bltu	r5,r4,109d4 <__alt_data_end+0xffff67f4>
   109e8:	0005883a 	mov	r2,zero
   109ec:	18000726 	beq	r3,zero,10a0c <__divsi3+0x58>
   109f0:	0005883a 	mov	r2,zero
   109f4:	31400236 	bltu	r6,r5,10a00 <__divsi3+0x4c>
   109f8:	314dc83a 	sub	r6,r6,r5
   109fc:	10c4b03a 	or	r2,r2,r3
   10a00:	1806d07a 	srli	r3,r3,1
   10a04:	280ad07a 	srli	r5,r5,1
   10a08:	183ffa1e 	bne	r3,zero,109f4 <__alt_data_end+0xffff6814>
   10a0c:	38000126 	beq	r7,zero,10a14 <__divsi3+0x60>
   10a10:	0085c83a 	sub	r2,zero,r2
   10a14:	f800283a 	ret
   10a18:	014bc83a 	sub	r5,zero,r5
   10a1c:	39c0005c 	xori	r7,r7,1
   10a20:	003fe706 	br	109c0 <__alt_data_end+0xffff67e0>
   10a24:	0109c83a 	sub	r4,zero,r4
   10a28:	01c00044 	movi	r7,1
   10a2c:	003fe306 	br	109bc <__alt_data_end+0xffff67dc>
   10a30:	00c00044 	movi	r3,1
   10a34:	003fee06 	br	109f0 <__alt_data_end+0xffff6810>

00010a38 <__modsi3>:
   10a38:	20001716 	blt	r4,zero,10a98 <__modsi3+0x60>
   10a3c:	000f883a 	mov	r7,zero
   10a40:	2005883a 	mov	r2,r4
   10a44:	28001216 	blt	r5,zero,10a90 <__modsi3+0x58>
   10a48:	2900162e 	bgeu	r5,r4,10aa4 <__modsi3+0x6c>
   10a4c:	01800804 	movi	r6,32
   10a50:	00c00044 	movi	r3,1
   10a54:	00000106 	br	10a5c <__modsi3+0x24>
   10a58:	30000a26 	beq	r6,zero,10a84 <__modsi3+0x4c>
   10a5c:	294b883a 	add	r5,r5,r5
   10a60:	31bfffc4 	addi	r6,r6,-1
   10a64:	18c7883a 	add	r3,r3,r3
   10a68:	293ffb36 	bltu	r5,r4,10a58 <__alt_data_end+0xffff6878>
   10a6c:	18000526 	beq	r3,zero,10a84 <__modsi3+0x4c>
   10a70:	1806d07a 	srli	r3,r3,1
   10a74:	11400136 	bltu	r2,r5,10a7c <__modsi3+0x44>
   10a78:	1145c83a 	sub	r2,r2,r5
   10a7c:	280ad07a 	srli	r5,r5,1
   10a80:	183ffb1e 	bne	r3,zero,10a70 <__alt_data_end+0xffff6890>
   10a84:	38000126 	beq	r7,zero,10a8c <__modsi3+0x54>
   10a88:	0085c83a 	sub	r2,zero,r2
   10a8c:	f800283a 	ret
   10a90:	014bc83a 	sub	r5,zero,r5
   10a94:	003fec06 	br	10a48 <__alt_data_end+0xffff6868>
   10a98:	0109c83a 	sub	r4,zero,r4
   10a9c:	01c00044 	movi	r7,1
   10aa0:	003fe706 	br	10a40 <__alt_data_end+0xffff6860>
   10aa4:	00c00044 	movi	r3,1
   10aa8:	003ff106 	br	10a70 <__alt_data_end+0xffff6890>

00010aac <__udivsi3>:
   10aac:	200d883a 	mov	r6,r4
   10ab0:	2900152e 	bgeu	r5,r4,10b08 <__udivsi3+0x5c>
   10ab4:	28001416 	blt	r5,zero,10b08 <__udivsi3+0x5c>
   10ab8:	00800804 	movi	r2,32
   10abc:	00c00044 	movi	r3,1
   10ac0:	00000206 	br	10acc <__udivsi3+0x20>
   10ac4:	10000e26 	beq	r2,zero,10b00 <__udivsi3+0x54>
   10ac8:	28000516 	blt	r5,zero,10ae0 <__udivsi3+0x34>
   10acc:	294b883a 	add	r5,r5,r5
   10ad0:	10bfffc4 	addi	r2,r2,-1
   10ad4:	18c7883a 	add	r3,r3,r3
   10ad8:	293ffa36 	bltu	r5,r4,10ac4 <__alt_data_end+0xffff68e4>
   10adc:	18000826 	beq	r3,zero,10b00 <__udivsi3+0x54>
   10ae0:	0005883a 	mov	r2,zero
   10ae4:	31400236 	bltu	r6,r5,10af0 <__udivsi3+0x44>
   10ae8:	314dc83a 	sub	r6,r6,r5
   10aec:	10c4b03a 	or	r2,r2,r3
   10af0:	1806d07a 	srli	r3,r3,1
   10af4:	280ad07a 	srli	r5,r5,1
   10af8:	183ffa1e 	bne	r3,zero,10ae4 <__alt_data_end+0xffff6904>
   10afc:	f800283a 	ret
   10b00:	0005883a 	mov	r2,zero
   10b04:	f800283a 	ret
   10b08:	00c00044 	movi	r3,1
   10b0c:	003ff406 	br	10ae0 <__alt_data_end+0xffff6900>

00010b10 <__umodsi3>:
   10b10:	2005883a 	mov	r2,r4
   10b14:	2900122e 	bgeu	r5,r4,10b60 <__umodsi3+0x50>
   10b18:	28001116 	blt	r5,zero,10b60 <__umodsi3+0x50>
   10b1c:	01800804 	movi	r6,32
   10b20:	00c00044 	movi	r3,1
   10b24:	00000206 	br	10b30 <__umodsi3+0x20>
   10b28:	30000c26 	beq	r6,zero,10b5c <__umodsi3+0x4c>
   10b2c:	28000516 	blt	r5,zero,10b44 <__umodsi3+0x34>
   10b30:	294b883a 	add	r5,r5,r5
   10b34:	31bfffc4 	addi	r6,r6,-1
   10b38:	18c7883a 	add	r3,r3,r3
   10b3c:	293ffa36 	bltu	r5,r4,10b28 <__alt_data_end+0xffff6948>
   10b40:	18000626 	beq	r3,zero,10b5c <__umodsi3+0x4c>
   10b44:	1806d07a 	srli	r3,r3,1
   10b48:	11400136 	bltu	r2,r5,10b50 <__umodsi3+0x40>
   10b4c:	1145c83a 	sub	r2,r2,r5
   10b50:	280ad07a 	srli	r5,r5,1
   10b54:	183ffb1e 	bne	r3,zero,10b44 <__alt_data_end+0xffff6964>
   10b58:	f800283a 	ret
   10b5c:	f800283a 	ret
   10b60:	00c00044 	movi	r3,1
   10b64:	003ff706 	br	10b44 <__alt_data_end+0xffff6964>

00010b68 <__mulsi3>:
   10b68:	0005883a 	mov	r2,zero
   10b6c:	20000726 	beq	r4,zero,10b8c <__mulsi3+0x24>
   10b70:	20c0004c 	andi	r3,r4,1
   10b74:	2008d07a 	srli	r4,r4,1
   10b78:	18000126 	beq	r3,zero,10b80 <__mulsi3+0x18>
   10b7c:	1145883a 	add	r2,r2,r5
   10b80:	294b883a 	add	r5,r5,r5
   10b84:	203ffa1e 	bne	r4,zero,10b70 <__alt_data_end+0xffff6990>
   10b88:	f800283a 	ret
   10b8c:	f800283a 	ret

00010b90 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10b90:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10b94:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10b98:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10b9c:	dc000015 	stw	r16,0(sp)
   10ba0:	dfc00115 	stw	ra,4(sp)
   10ba4:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10ba8:	0010aac0 	call	10aac <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10bac:	10001026 	beq	r2,zero,10bf0 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10bb0:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10bb4:	013999b4 	movhi	r4,58982
   10bb8:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10bbc:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10bc0:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10bc4:	297fffc4 	addi	r5,r5,-1
   10bc8:	283ffe1e 	bne	r5,zero,10bc4 <__alt_data_end+0xffff69e4>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10bcc:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10bd0:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10bd4:	18bffb16 	blt	r3,r2,10bc4 <__alt_data_end+0xffff69e4>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10bd8:	01400144 	movi	r5,5
   10bdc:	8009883a 	mov	r4,r16
   10be0:	0010b680 	call	10b68 <__mulsi3>
   10be4:	10bfffc4 	addi	r2,r2,-1
   10be8:	103ffe1e 	bne	r2,zero,10be4 <__alt_data_end+0xffff6a04>
   10bec:	00000506 	br	10c04 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10bf0:	01400144 	movi	r5,5
   10bf4:	8009883a 	mov	r4,r16
   10bf8:	0010b680 	call	10b68 <__mulsi3>
   10bfc:	10bfffc4 	addi	r2,r2,-1
   10c00:	00bffe16 	blt	zero,r2,10bfc <__alt_data_end+0xffff6a1c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   10c04:	0005883a 	mov	r2,zero
   10c08:	dfc00117 	ldw	ra,4(sp)
   10c0c:	dc000017 	ldw	r16,0(sp)
   10c10:	dec00204 	addi	sp,sp,8
   10c14:	f800283a 	ret

00010c18 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10c18:	deffff04 	addi	sp,sp,-4
   10c1c:	01000074 	movhi	r4,1
   10c20:	01400074 	movhi	r5,1
   10c24:	dfc00015 	stw	ra,0(sp)
   10c28:	21037a04 	addi	r4,r4,3560
   10c2c:	2943b504 	addi	r5,r5,3796

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10c30:	2140061e 	bne	r4,r5,10c4c <alt_load+0x34>
   10c34:	01000074 	movhi	r4,1
   10c38:	01400074 	movhi	r5,1
   10c3c:	21000804 	addi	r4,r4,32
   10c40:	29400804 	addi	r5,r5,32
   10c44:	2140121e 	bne	r4,r5,10c90 <alt_load+0x78>
   10c48:	00000b06 	br	10c78 <alt_load+0x60>
   10c4c:	00c00074 	movhi	r3,1
   10c50:	18c3b504 	addi	r3,r3,3796
   10c54:	1907c83a 	sub	r3,r3,r4
   10c58:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10c5c:	10fff526 	beq	r2,r3,10c34 <__alt_data_end+0xffff6a54>
    {
      *to++ = *from++;
   10c60:	114f883a 	add	r7,r2,r5
   10c64:	39c00017 	ldw	r7,0(r7)
   10c68:	110d883a 	add	r6,r2,r4
   10c6c:	10800104 	addi	r2,r2,4
   10c70:	31c00015 	stw	r7,0(r6)
   10c74:	003ff906 	br	10c5c <__alt_data_end+0xffff6a7c>
   10c78:	01000074 	movhi	r4,1
   10c7c:	01400074 	movhi	r5,1
   10c80:	21037104 	addi	r4,r4,3524
   10c84:	29437104 	addi	r5,r5,3524

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10c88:	2140101e 	bne	r4,r5,10ccc <alt_load+0xb4>
   10c8c:	00000b06 	br	10cbc <alt_load+0xa4>
   10c90:	00c00074 	movhi	r3,1
   10c94:	18c00804 	addi	r3,r3,32
   10c98:	1907c83a 	sub	r3,r3,r4
   10c9c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10ca0:	10fff526 	beq	r2,r3,10c78 <__alt_data_end+0xffff6a98>
    {
      *to++ = *from++;
   10ca4:	114f883a 	add	r7,r2,r5
   10ca8:	39c00017 	ldw	r7,0(r7)
   10cac:	110d883a 	add	r6,r2,r4
   10cb0:	10800104 	addi	r2,r2,4
   10cb4:	31c00015 	stw	r7,0(r6)
   10cb8:	003ff906 	br	10ca0 <__alt_data_end+0xffff6ac0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10cbc:	0010db40 	call	10db4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10cc0:	dfc00017 	ldw	ra,0(sp)
   10cc4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10cc8:	0010db81 	jmpi	10db8 <alt_icache_flush_all>
   10ccc:	00c00074 	movhi	r3,1
   10cd0:	18c37a04 	addi	r3,r3,3560
   10cd4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10cd8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10cdc:	18bff726 	beq	r3,r2,10cbc <__alt_data_end+0xffff6adc>
    {
      *to++ = *from++;
   10ce0:	114f883a 	add	r7,r2,r5
   10ce4:	39c00017 	ldw	r7,0(r7)
   10ce8:	110d883a 	add	r6,r2,r4
   10cec:	10800104 	addi	r2,r2,4
   10cf0:	31c00015 	stw	r7,0(r6)
   10cf4:	003ff906 	br	10cdc <__alt_data_end+0xffff6afc>

00010cf8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10cf8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10cfc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10d00:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10d04:	0010d5c0 	call	10d5c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10d08:	0010d7c0 	call	10d7c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10d0c:	d1a03e17 	ldw	r6,-32520(gp)
   10d10:	d1603f17 	ldw	r5,-32516(gp)
   10d14:	d1204017 	ldw	r4,-32512(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10d18:	dfc00017 	ldw	ra,0(sp)
   10d1c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10d20:	00101741 	jmpi	10174 <main>

00010d24 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10d24:	defffe04 	addi	sp,sp,-8
   10d28:	dc000015 	stw	r16,0(sp)
   10d2c:	dfc00115 	stw	ra,4(sp)
   10d30:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10d34:	00109980 	call	10998 <strlen>
   10d38:	01000074 	movhi	r4,1
   10d3c:	000f883a 	mov	r7,zero
   10d40:	100d883a 	mov	r6,r2
   10d44:	800b883a 	mov	r5,r16
   10d48:	2103b404 	addi	r4,r4,3792
#else
    return fputs(str, stdout);
#endif
#endif
}
   10d4c:	dfc00117 	ldw	ra,4(sp)
   10d50:	dc000017 	ldw	r16,0(sp)
   10d54:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10d58:	0010d801 	jmpi	10d80 <altera_avalon_jtag_uart_write>

00010d5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10d5c:	deffff04 	addi	sp,sp,-4
   10d60:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   10d64:	0010dbc0 	call	10dbc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10d68:	00800044 	movi	r2,1
   10d6c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10d70:	dfc00017 	ldw	ra,0(sp)
   10d74:	dec00104 	addi	sp,sp,4
   10d78:	f800283a 	ret

00010d7c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10d7c:	f800283a 	ret

00010d80 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10d80:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10d84:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   10d88:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10d8c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10d90:	2980072e 	bgeu	r5,r6,10db0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10d94:	38c00037 	ldwio	r3,0(r7)
   10d98:	18ffffec 	andhi	r3,r3,65535
   10d9c:	183ffc26 	beq	r3,zero,10d90 <__alt_data_end+0xffff6bb0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10da0:	28c00007 	ldb	r3,0(r5)
   10da4:	20c00035 	stwio	r3,0(r4)
   10da8:	29400044 	addi	r5,r5,1
   10dac:	003ff806 	br	10d90 <__alt_data_end+0xffff6bb0>

  return count;
}
   10db0:	f800283a 	ret

00010db4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10db4:	f800283a 	ret

00010db8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10db8:	f800283a 	ret

00010dbc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10dbc:	000170fa 	wrctl	ienable,zero
   10dc0:	f800283a 	ret
